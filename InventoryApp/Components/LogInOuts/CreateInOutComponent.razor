@using Entities;
@using Business;
@inject ProductBusiness productB;
@inject WareHouseBusiness wareHouseB;
@inject StorageBusiness storageB;

<div class="form-group">
    <select class="form-control" @onchange="handleChange">
        <option value="Seleccione bodega..." />
    </select>
    @foreach (var wareHouse in wareHouses)
    {
        <option value="@wareHouse.WareHouseId">@wareHouse.WareHouseName</option>
    }
</div>
<hr />
<EditForm Model="log">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="log.StorageId">
            <option value="Seleccione producto..." />
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>

    </div>
    <div class="form-group">
        <label>Cantidad</label>
        <InputNumber class="form-control" @bind-Value="log.Quantity" />
    </div>
    <div class="form-group">
        <label>Entrada?</label>
        <InputCheckbox class="form-control" @bind-Value="log.IsInput" />
    </div>
    <input type="button" class="btn btn-primary" value="@buttonValue" @onclick="handleClick" />
</EditForm>


@code {
    InputOutputEntity log = new InputOutputEntity();
    List<WareHouseEntity> wareHouses = new List<WareHouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();

    ProductEntity product = new ProductEntity();
    StorageEntity storage = new StorageEntity();

    string buttonValue => log.IsInput ? "Registrar entrada" : "Registrar salida";

    protected override async Task OnInitializedAsync()
    {
        wareHouses = wareHouseB.GetItems();
        storages = storageB.GetItems();
    }
    private void handleChange(ChangeEventArgs e)
    {
        string wareHouseId = (string)e.Value;
        storages = storageB.GetItemsByWareHouseId(wareHouseId);
    }
    private void handleClick()
    {
        storage = storages.FirstOrDefault(f => f.StorageId == log.StorageId);
        product = storage.Product;

        if (log.IsInput)
        {
            storage.PartialQuantity += log.Quantity;
            product.TotalQuantity += log.Quantity;
        }
        else
        {
            storage.PartialQuantity -= log.Quantity;
            product.TotalQuantity -= log.Quantity;
        }

        storageB.UpdateItem(storage);
        productB.UpdateItem(product);
    }
}
